# Dockerfile - Middleware API
FROM node:18-alpine

# Install dependencies
RUN apk add --no-cache libc6-compat curl

# Set working directory
WORKDIR /app

# Copy package files for monorepo context
COPY package*.json ./
COPY turbo.json ./

# Copy middleware-api specific files
COPY packages/middleware-api/package*.json ./packages/middleware-api/
COPY packages/middleware-api/next.config.js ./packages/middleware-api/
COPY packages/middleware-api/tsconfig.json ./packages/middleware-api/

# Install dependencies at root level (for monorepo) including devDependencies for TypeScript
RUN npm install --include=dev

# Copy all source code (monorepo needs full context)
COPY packages/middleware-api ./packages/middleware-api

# Set environment variables for Railway
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
# Railway provides PORT environment variable automatically
ENV PORT=${PORT:-3001}

# Change to middleware-api directory and build
WORKDIR /app/packages/middleware-api
RUN npm run build

# Expose the port that Railway expects
EXPOSE $PORT

# Health check to ensure service is running
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:$PORT/api/health || exit 1

# Copy start script
COPY packages/middleware-api/start.sh ./start.sh
RUN chmod +x ./start.sh

# Start the application using custom script
CMD ["./start.sh"]